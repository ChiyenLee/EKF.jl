###############################################################################
# State and State Error 
###############################################################################
struct LeggedState{T} <: EKF.State{28, T}
    rx::T; ry::T; rz::T
    qw::T; qx::T; qy::T; qz::T
    vx::T; vy::T; vz::T
    p1x::T; p1y::T; p1z::T
    p2x::T; p2y::T; p2z::T
    p3x::T; p3y::T; p3z::T
    p4x::T; p4y::T; p4z::T
    Œ±x::T; Œ±y::T; Œ±z::T
    Œ≤x::T; Œ≤y::T; Œ≤z::T 
end

struct LeggedError{T} <: EKF.ErrorState{27, T}
    rx::T; ry::T; rz::T
    qx::T; qy::T; qz::T
    vx::T; vy::T; vz::T
    p1x::T; p1y::T; p1z::T
    p2x::T; p2y::T; p2z::T
    p3x::T; p3y::T; p3z::T
    p4x::T; p4y::T; p4z::T 
    Œ±x::T; Œ±y::T; Œ±z::T
    Œ≤x::T; Œ≤y::T; Œ≤z::T 
end

###############################################################################
# Control Input 
###############################################################################
struct ImuInput{T} <: EKF.Input{6, T}
    vÃáùë•::T; vÃáùë¶::T; vÃáùëß::T
    œâùë•::T; œâùë¶::T; œâùëß::T
end

###############################################################################
# Observation Model 
###############################################################################
struct ContactMeasure{T} <: EKF.Measurement{3, T}
    px::T; py::T; pz::T
end

struct ErrorContactMeasure{T} <: EKF.ErrorMeasurement{3, T}
    px::T; py::T; pz::T
end

mutable struct ContactObservation1{T} <: EKF.Observation{T}
    measurement::ContactMeasure{T}
    measure_cov::SMatrix{length(ContactMeasure), length(ContactMeasure), T, length(ContactMeasure) * length(ContactMeasure)}
end

mutable struct ContactObservation2{T} <: EKF.Observation{T}
    measurement::ContactMeasure{T}
    measure_cov::SMatrix{length(ContactMeasure), length(ContactMeasure), T, length(ContactMeasure) * length(ContactMeasure)}
end

mutable struct ContactObservation3{T} <: EKF.Observation{T}
    measurement::ContactMeasure{T}
    measure_cov::SMatrix{length(ContactMeasure), length(ContactMeasure), T, length(ContactMeasure) * length(ContactMeasure)}
end

mutable struct ContactObservation4{T} <: EKF.Observation{T}
    measurement::ContactMeasure{T}
    measure_cov::SMatrix{length(ContactMeasure), length(ContactMeasure), T, length(ContactMeasure) * length(ContactMeasure)}
end

# ###############################################################################
# #                               Process and Process Jacobian 
# ###############################################################################

function EKF.process(x::LeggedState, u::ImuInput, h::Float64)::LeggedState
    g = @SVector [0,0,9.81]
    f, œâ = getComponents(u)
    r, q, v, p1, p2, p3 ,p4, Œ±, Œ≤ = getComponents(x)
    C = q; 

    # Integrate 
    r‚Çñ‚Çä‚ÇÅ = r + h*v + 0.5*h^2*(C*(f-Œ±)-g)
	v‚Çñ‚Çä‚ÇÅ = v + h*(C*(f - Œ±) - g)
    q‚Çñ‚Çä‚ÇÅ = Rotations.params(q) + 0.5 * Rotations.‚àádifferential(C) * (œâ - Œ≤) * h 
    q‚Çñ‚Çä‚ÇÅ = q‚Çñ‚Çä‚ÇÅ / norm(q‚Çñ‚Çä‚ÇÅ)

    return LeggedState(r‚Çñ‚Çä‚ÇÅ...,q‚Çñ‚Çä‚ÇÅ..., v‚Çñ‚Çä‚ÇÅ..., p1..., p2..., p3..., p4..., Œ±..., Œ≤...)
end

function EKF.error_process_jacobian(s‚Çñ::LeggedState, u‚Çñ::ImuInput, h::Float64)::SMatrix{length(LeggedError), length(LeggedError), Float64}
    F = ForwardDiff.jacobian(st->EKF.process(LeggedState(st), u‚Çñ, h), SVector(s‚Çñ))
    q‚Çñ = Rotations.UnitQuaternion(s‚Çñ.qw, s‚Çñ.qx, s‚Çñ.qy, s‚Çñ.qz)
    s‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ = EKF.process(s‚Çñ,u‚Çñ,h) # not ideal to call it again here but oh well
	q‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ = Rotations.UnitQuaternion(s‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ.qw, s‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ.qx, s‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ.qy, s‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ.qz)

	J‚Çñ = @MMatrix zeros(length(LeggedState), length(LeggedError));
	J‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ = @MMatrix zeros(length(LeggedState), length(LeggedError));
	J‚Çñ[4:7, 4:6] .= Rotations.‚àádifferential(q‚Çñ)
	J‚Çñ[diagind(J‚Çñ)[1:3]] .= 1.0;  J‚Çñ[diagind(J‚Çñ,-1)[7:length(LeggedError)]] .= 1;
	J‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ[4:7, 4:6] .= Rotations.‚àádifferential(q‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ)
    J‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ[diagind(J‚Çñ)[1:3]] .= 1.0;  J‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ[diagind(J‚Çñ,-1)[7:length(LeggedError)]] .= 1;

	J‚Çñ = SMatrix(J‚Çñ)
	J‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ = SMatrix(J‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ)
    return J‚Çñ‚Çä‚ÇÅ‚Çó‚Çñ' * F * J‚Çñ
end


###############################################################################
#   Measurement and measure joacbians 
###############################################################################

function EKF.measure(::Type{ContactObservation1{T}}, x::LeggedState)::ContactMeasure where T 
    r, q, v, p1, p2, p3 ,p4, Œ±, Œ≤ = getComponents(x)
    p_body = q' * (p1  - r) 
    return ContactMeasure(p_body...)
end

function EKF.measure(::Type{ContactObservation2{T}}, x::LeggedState)::ContactMeasure where T 
    r, q, v, p1, p2, p3 ,p4, Œ±, Œ≤ = getComponents(x)
    p_body = q' * (p2  - r) 
    return ContactMeasure(p_body...)
end

function EKF.measure(::Type{ContactObservation3{T}}, x::LeggedState)::ContactMeasure where T 
    r, q, v, p1, p2, p3 ,p4, Œ±, Œ≤ = getComponents(x)
    p_body = q' * (p3  - r) 
    return ContactMeasure(p_body...)
end

function EKF.measure(::Type{ContactObservation4{T}}, x::LeggedState)::ContactMeasure where T 
    r, q, v, p1, p2, p3 ,p4, Œ±, Œ≤ = getComponents(x)
    p_body = q' * (p4  - r) 
    return ContactMeasure(p_body...)
end


function EKF.error_measure_jacobian(::Type{ContactObservation1{T}}, x‚Çñ::LeggedState)::SMatrix{length(ErrorContactMeasure), length(LeggedError), Float64} where T 
    A = ForwardDiff.jacobian(st->EKF.measure(ContactObservation1{T}, LeggedState(st)), SVector(x‚Çñ))

    q‚Çñ = Rotations.UnitQuaternion(x‚Çñ.qw, x‚Çñ.qx, x‚Çñ.qy, x‚Çñ.qz)
	J‚Çñ = @MMatrix zeros(length(LeggedState), length(LeggedError));
	J‚Çñ[4:7, 4:6] .= Rotations.‚àádifferential(q‚Çñ)
 	J‚Çñ[diagind(J‚Çñ)[1:3]] .= 1.0;  J‚Çñ[diagind(J‚Çñ,-1)[7:length(LeggedError)]] .= 1;

    return A * J‚Çñ
end

function EKF.error_measure_jacobian(::Type{ContactObservation2{T}}, x‚Çñ::LeggedState)::SMatrix{length(ErrorContactMeasure), length(LeggedError), Float64} where T
    A = ForwardDiff.jacobian(st->EKF.measure(ContactObservation2{T}, LeggedState(st)), SVector(x‚Çñ))

    q‚Çñ = Rotations.UnitQuaternion(x‚Çñ.qw, x‚Çñ.qx, x‚Çñ.qy, x‚Çñ.qz)
	J‚Çñ = @MMatrix zeros(length(LeggedState), length(LeggedError));
	J‚Çñ[4:7, 4:6] .= Rotations.‚àádifferential(q‚Çñ)
 	J‚Çñ[diagind(J‚Çñ)[1:3]] .= 1.0;  J‚Çñ[diagind(J‚Çñ,-1)[7:length(LeggedError)]] .= 1;

    return A * J‚Çñ
end

function EKF.error_measure_jacobian(::Type{ContactObservation3{T}}, x‚Çñ::LeggedState)::SMatrix{length(ErrorContactMeasure), length(LeggedError), Float64} where T 
    A = ForwardDiff.jacobian(st->EKF.measure(ContactObservation3{T}, LeggedState(st)), SVector(x‚Çñ))

    q‚Çñ = Rotations.UnitQuaternion(x‚Çñ.qw, x‚Çñ.qx, x‚Çñ.qy, x‚Çñ.qz)
	J‚Çñ = @MMatrix zeros(length(LeggedState), length(LeggedError));
	J‚Çñ[4:7, 4:6] .= Rotations.‚àádifferential(q‚Çñ)
 	J‚Çñ[diagind(J‚Çñ)[1:3]] .= 1.0;  J‚Çñ[diagind(J‚Çñ,-1)[7:length(LeggedError)]] .= 1;

    return A * J‚Çñ
end

function EKF.error_measure_jacobian(::Type{ContactObservation4{T}}, x‚Çñ::LeggedState)::SMatrix{length(ErrorContactMeasure), length(LeggedError), Float64} where T 
    A = ForwardDiff.jacobian(st->EKF.measure(ContactObservation4{T}, LeggedState(st)), SVector(x‚Çñ))

    q‚Çñ = Rotations.UnitQuaternion(x‚Çñ.qw, x‚Çñ.qx, x‚Çñ.qy, x‚Çñ.qz)
	J‚Çñ = @MMatrix zeros(length(LeggedState), length(LeggedError));
	J‚Çñ[4:7, 4:6] .= Rotations.‚àádifferential(q‚Çñ)
 	J‚Çñ[diagind(J‚Çñ)[1:3]] .= 1.0;  J‚Çñ[diagind(J‚Çñ,-1)[7:length(LeggedError)]] .= 1;

    return A * J‚Çñ
end


###############################################################################
#                          Compositions 
###############################################################################

function EKF.state_composition(s::LeggedState, ds::LeggedError)
    r, q, v, p1, p2, p3 ,p4, Œ±, Œ≤ = getComponents(s)
    dr, dœï, dv, dp1, dp2, dp3 , dp4, dŒ±, dŒ≤ = getComponents(ds)

	ang_error = Rotations.RotationError(SVector{3, Float64}(dœï), Rotations.CayleyMap())
	q‚Çñ‚Çä‚ÇÅ = Rotations.add_error(Rotations.UnitQuaternion(q), ang_error)
	q‚Çñ‚Çä‚ÇÅ = @SVector [q‚Çñ‚Çä‚ÇÅ.w, q‚Çñ‚Çä‚ÇÅ.x, q‚Çñ‚Çä‚ÇÅ.y, q‚Çñ‚Çä‚ÇÅ.z]

	r = r + dr
	v = v + dv
	Œ± = Œ± + dŒ±
	Œ≤ = Œ≤ + dŒ≤
    p1 = p1 + dp1 
    p2 = p2 + dp2 
    p3 = p3 + dp3 
    p4 = p4 + dp4 

    return LeggedState(r..., q‚Çñ‚Çä‚ÇÅ..., v..., p1..., p2..., p3..., p4..., Œ±..., Œ≤...)
end

function EKF.measurement_error(m2::ContactMeasure, m1::ContactMeasure)::ErrorContactMeasure
    p1 = @SVector [m1.px, m1.py, m1.pz]
    p2 = @SVector [m2.px, m2.py, m2.pz]

    pos_er = p2 - p1 

    dx = ErrorContactMeasure(pos_er)
    return dx
end

###############################################################################
#                          Utilities 
###############################################################################

function getComponents(x::LeggedState)
    r = @SVector [x.rx, x.ry, x.rz]
    q = Rotations.UnitQuaternion(x.qw, x.qx, x.qy, x.qz)
    p1 = @SVector [x.p1x, x.p1y, x.p1z]
    p2 = @SVector [x.p2x, x.p2y, x.p2z]
    p3 = @SVector [x.p3x, x.p3y, x.p3z]
    p4 = @SVector [x.p4x, x.p4y, x.p4z]
    v = @SVector [x.vx, x.vy, x.vz]
    Œ± = @SVector [x.Œ±x, x.Œ±y, x.Œ±z]
    Œ≤ = @SVector [x.Œ≤x, x.Œ≤y, x.Œ≤z]
    return r, q, v, p1, p2, p3 ,p4, Œ±, Œ≤
end

function getComponents(x::LeggedError)
    r = @SVector [x.rx, x.ry, x.rz]
    œï = @SVector [x.qx, x.qy, x.qz]
    p1 = @SVector [x.p1x, x.p1y, x.p1z]
    p2 = @SVector [x.p2x, x.p2y, x.p2z]
    p3 = @SVector [x.p3x, x.p3y, x.p3z]
    p4 = @SVector [x.p4x, x.p4y, x.p4z]
    v = @SVector [x.vx, x.vy, x.vz]
    Œ± = @SVector [x.Œ±x, x.Œ±y, x.Œ±z]
    Œ≤ = @SVector [x.Œ≤x, x.Œ≤y, x.Œ≤z]
	return  r, œï, v, p1, p2, p3 ,p4, Œ±, Œ≤
end

function getComponents(u::ImuInput)
    vÃá = @SVector [u.vÃáùë•, u.vÃáùë¶, u.vÃáùëß]
    œâ = @SVector [u.œâùë•, u.œâùë¶, u.œâùëß]
    return vÃá, œâ
end


